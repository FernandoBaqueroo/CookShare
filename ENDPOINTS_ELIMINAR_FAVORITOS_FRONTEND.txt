üóëÔ∏è ENDPOINTS DE ELIMINACI√ìN Y FAVORITOS - GU√çA COMPLETA PARA FRONTEND
================================================================

üéØ ENDPOINTS DISPONIBLES

1. DELETE /api/receta/{id} - Eliminar post (marcar como inactiva)
2. POST /api/favorito - A√±adir receta a favoritos
3. DELETE /api/favorito/{id} - Eliminar favorito

================================================================

üóëÔ∏è 1. ELIMINAR POST (RECETA)
==============================

ENDPOINT: DELETE /api/receta/{id}

üîê AUTENTICACI√ìN
- Requerida: S√≠
- Tipo: Bearer Token
- Header: Authorization: Bearer {token}

üìã PAR√ÅMETROS DE URL
- id: number - ID de la receta a eliminar

üì§ REQUEST EXAMPLE

const eliminarReceta = async (recetaId) => {
  try {
    const response = await fetch(`/api/receta/${recetaId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (response.ok) {
      const data = await response.json();
      console.log('Receta eliminada:', data);
    } else {
      const error = await response.json();
      console.error('Error:', error);
    }
  } catch (error) {
    console.error('Error:', error);
  }
};

‚úÖ RESPONSE SUCCESS (200)

{
  "message": "Receta eliminada exitosamente",
  "data": {
    "receta_id": 25
  }
}

‚ùå C√ìDIGOS DE ERROR

| C√≥digo | Descripci√≥n |
|--------|-------------|
| 404 | Receta no encontrada |
| 401 | No autorizado (token inv√°lido) |

================================================================

‚ù§Ô∏è 2. A√ëADIR RECETA A FAVORITOS
================================

ENDPOINT: POST /api/favorito

üîê AUTENTICACI√ìN
- Requerida: S√≠
- Tipo: Bearer Token
- Header: Authorization: Bearer {token}

üìã CAMPOS REQUERIDOS

{
  "receta_id": "number (requerido)",
  "usuario_id": "number (requerido)"
}

üì§ REQUEST EXAMPLE

const a√±adirFavorito = async (recetaId, usuarioId) => {
  try {
    const response = await fetch('/api/favorito', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        receta_id: recetaId,
        usuario_id: usuarioId
      })
    });

    if (response.ok) {
      const data = await response.json();
      console.log('Favorito a√±adido:', data);
    } else {
      const error = await response.json();
      console.error('Error:', error);
    }
  } catch (error) {
    console.error('Error:', error);
  }
};

‚úÖ RESPONSE SUCCESS (201)

{
  "message": "Receta a√±adida a favoritos exitosamente",
  "data": {
    "favorito_id": 15
  }
}

‚ùå C√ìDIGOS DE ERROR

| C√≥digo | Descripci√≥n |
|--------|-------------|
| 400 | El receta_id y usuario_id son requeridos |
| 400 | Ya has a√±adido esta receta a favoritos |
| 560 | No existe una receta con el ID proporcionado |
| 565 | No existe un usuario con el ID proporcionado |
| 401 | No autorizado (token inv√°lido) |

================================================================

üóëÔ∏è 3. ELIMINAR FAVORITO
=========================

ENDPOINT: DELETE /api/favorito/{id}

üîê AUTENTICACI√ìN
- Requerida: S√≠
- Tipo: Bearer Token
- Header: Authorization: Bearer {token}

üìã PAR√ÅMETROS DE URL
- id: number - ID del favorito a eliminar

üì§ REQUEST EXAMPLE

const eliminarFavorito = async (favoritoId) => {
  try {
    const response = await fetch(`/api/favorito/${favoritoId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (response.ok) {
      const data = await response.json();
      console.log('Favorito eliminado:', data);
    } else {
      const error = await response.json();
      console.error('Error:', error);
    }
  } catch (error) {
    console.error('Error:', error);
  }
};

‚úÖ RESPONSE SUCCESS (200)

{
  "message": "Favorito eliminado exitosamente",
  "data": {
    "favorito_id": 15
  }
}

‚ùå C√ìDIGOS DE ERROR

| C√≥digo | Descripci√≥n |
|--------|-------------|
| 404 | Favorito no encontrado |
| 401 | No autorizado (token inv√°lido) |

================================================================

üí° RECOMENDACIONES PARA EL FRONTEND

FLUJO DE IMPLEMENTACI√ìN:

1. ELIMINAR POST:
   - Mostrar bot√≥n "Eliminar" solo al autor de la receta
   - Confirmar acci√≥n con modal/dialog
   - Actualizar UI despu√©s de eliminar (ocultar receta)
   - Mostrar mensaje de confirmaci√≥n

2. A√ëADIR FAVORITOS:
   - Bot√≥n "‚ù§Ô∏è" o "A√±adir a favoritos"
   - Cambiar estado visual inmediatamente (optimistic update)
   - Manejar error si ya est√° en favoritos
   - Actualizar contador de favoritos

3. ELIMINAR FAVORITOS:
   - Bot√≥n "üíî" o "Quitar de favoritos"
   - Cambiar estado visual inmediatamente
   - Actualizar contador de favoritos
   - Remover de lista de favoritos

EJEMPLO DE IMPLEMENTACI√ìN:

```javascript
// Componente de receta con botones de acci√≥n
const RecetaCard = ({ receta, usuarioId, onUpdate }) => {
  const [isFavorite, setIsFavorite] = useState(false);
  const [favoritoId, setFavoritoId] = useState(null);

  // A√±adir a favoritos
  const a√±adirFavorito = async () => {
    try {
      const response = await fetch('/api/favorito', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          receta_id: receta.id,
          usuario_id: usuarioId
        })
      });

      if (response.ok) {
        const data = await response.json();
        setIsFavorite(true);
        setFavoritoId(data.data.favorito_id);
        // Actualizar contador de favoritos
        onUpdate();
      }
    } catch (error) {
      console.error('Error al a√±adir favorito:', error);
    }
  };

  // Eliminar favorito
  const eliminarFavorito = async () => {
    try {
      const response = await fetch(`/api/favorito/${favoritoId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        setIsFavorite(false);
        setFavoritoId(null);
        // Actualizar contador de favoritos
        onUpdate();
      }
    } catch (error) {
      console.error('Error al eliminar favorito:', error);
    }
  };

  // Eliminar receta
  const eliminarReceta = async () => {
    if (window.confirm('¬øEst√°s seguro de que quieres eliminar esta receta?')) {
      try {
        const response = await fetch(`/api/receta/${receta.id}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });

        if (response.ok) {
          // Ocultar receta de la UI
          onUpdate();
          alert('Receta eliminada exitosamente');
        }
      } catch (error) {
        console.error('Error al eliminar receta:', error);
      }
    }
  };

  return (
    <div className="receta-card">
      <h3>{receta.titulo}</h3>
      <p>{receta.descripcion}</p>
      
      {/* Bot√≥n de favorito */}
      <button 
        onClick={isFavorite ? eliminarFavorito : a√±adirFavorito}
        className={isFavorite ? 'favorito-activo' : 'favorito-inactivo'}
      >
        {isFavorite ? '‚ù§Ô∏è' : 'ü§ç'}
      </button>

      {/* Bot√≥n eliminar (solo para el autor) */}
      {receta.usuario_id === usuarioId && (
        <button onClick={eliminarReceta} className="btn-eliminar">
          üóëÔ∏è Eliminar
        </button>
      )}
    </div>
  );
};
```

NOTAS IMPORTANTES:

ELIMINAR POST:
- La receta se marca como inactiva, no se elimina f√≠sicamente
- Solo el autor puede eliminar su propia receta
- Despu√©s de eliminar, la receta no aparece en feeds ni b√∫squedas

FAVORITOS:
- Un usuario no puede a√±adir la misma receta dos veces
- El favorito_id se devuelve al crear y se necesita para eliminar
- Los favoritos se ordenan por fecha (m√°s recientes primero)

SEGURIDAD:
- Todos los endpoints requieren autenticaci√≥n
- Verificar permisos en frontend (solo autor puede eliminar)
- Manejar errores de token expirado (401)

UI/UX:
- Usar iconos intuitivos (‚ù§Ô∏è, ü§ç, üóëÔ∏è)
- Confirmar acciones destructivas
- Actualizar UI inmediatamente (optimistic updates)
- Mostrar mensajes de √©xito/error 