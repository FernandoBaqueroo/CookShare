üì± ENDPOINT RECETAS DE USUARIO - GU√çA COMPLETA PARA FRONTEND
================================================================

üéØ ENDPOINT DISPONIBLE

GET /api/usuario/{nombre_usuario}/recetas - Obtener todas las recetas de un usuario con informaci√≥n completa

‚ö†Ô∏è NOTA: Este endpoint devuelve informaci√≥n completa de las recetas incluyendo ingredientes, etiquetas y estad√≠sticas

================================================================

üç≥ OBTENER RECETAS DE UN USUARIO
==================================

ENDPOINT: GET /api/usuario/{nombre_usuario}/recetas

üîê AUTENTICACI√ìN
- Requerida: S√≠
- Tipo: Bearer Token
- Header: Authorization: Bearer {token}

üìã PAR√ÅMETROS DE URL (REQUERIDOS)
- nombre_usuario: string - Nombre de usuario cuyas recetas quieres ver

üì§ REQUEST EXAMPLE

const obtenerRecetasUsuario = async (nombreUsuario) => {
  try {
    const response = await fetch(`/api/usuario/${nombreUsuario}/recetas`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (response.ok) {
      const data = await response.json();
      console.log('Recetas del usuario:', data.data);
      return data.data;
    } else {
      const error = await response.json();
      console.error('Error:', error);
    }
  } catch (error) {
    console.error('Error:', error);
  }
};

‚úÖ RESPONSE SUCCESS (200)

{
  "data": [
    {
      "id": 1,
      "titulo": "Tortilla Espa√±ola Cl√°sica",
      "descripcion": "La aut√©ntica tortilla de patatas espa√±ola",
      "tiempo_preparacion": "15",
      "tiempo_coccion": "20",
      "porciones": "4",
      "dificultad": "Intermedio",
      "foto_principal": "http://localhost/api/images/posts/1.jpg",
      "instrucciones": "1. Pelar y cortar las patatas...",
      "fecha_creacion": "2025-01-15 10:30:00",
      "fecha_actualizacion": "2025-01-15 10:30:00",
      "categoria_nombre": "Platos Principales",
      "total_favoritos": 15,
      "ingredientes": [
        {
          "nombre": "Huevos",
          "unidad_medida": "unidades",
          "cantidad": "6.00",
          "notas": "huevos grandes"
        },
        {
          "nombre": "Patatas",
          "unidad_medida": "gramos",
          "cantidad": "500.00",
          "notas": "patatas medianas"
        }
      ],
      "etiquetas": [
        {
          "nombre": "Sin Gluten",
          "color": "#ffc107"
        },
        {
          "nombre": "Vegetariano",
          "color": "#28a745"
        }
      ]
    }
  ]
}

‚ùå C√ìDIGOS DE ERROR

| C√≥digo | Descripci√≥n |
|--------|-------------|
| 401 | No autorizado (token inv√°lido) |
| 404 | Usuario no encontrado |

================================================================

üéØ VENTAJAS DE ESTE ENDPOINT
=============================

‚úÖ **VENTAJAS:**
- Informaci√≥n completa de cada receta
- Incluye ingredientes con cantidades y notas
- Incluye etiquetas con colores
- Incluye estad√≠sticas (total de favoritos)
- Ordenadas por fecha (m√°s recientes primero)
- Solo recetas activas (no eliminadas)
- URLs de im√°genes procesadas autom√°ticamente

**EJEMPLO DE USO PR√ÅCTICO:**
```javascript
// En la p√°gina de perfil de usuario
const cargarPerfilCompleto = async (nombreUsuario) => {
  // 1. Cargar perfil b√°sico
  const perfil = await obtenerPerfilUsuario(nombreUsuario);
  
  // 2. Cargar recetas del usuario
  const recetas = await obtenerRecetasUsuario(nombreUsuario);
  
  // 3. Actualizar estado del componente
  setPerfil(perfil);
  setRecetas(recetas);
};
```

================================================================

üé® EJEMPLOS DE USO EN FRONTEND
================================

1. COMPONENTE DE PERFIL CON RECETAS (React)

```jsx
import React, { useState, useEffect } from 'react';

const PerfilUsuarioCompleto = ({ nombreUsuario, token }) => {
  const [perfil, setPerfil] = useState(null);
  const [recetas, setRecetas] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    cargarPerfilCompleto();
  }, [nombreUsuario]);

  const cargarPerfilCompleto = async () => {
    try {
      setLoading(true);
      
      // Cargar perfil y recetas en paralelo
      const [perfilData, recetasData] = await Promise.all([
        obtenerPerfilUsuario(nombreUsuario, token),
        obtenerRecetasUsuario(nombreUsuario, token)
      ]);
      
      setPerfil(perfilData);
      setRecetas(recetasData);
    } catch (error) {
      setError('Error al cargar el perfil');
    } finally {
      setLoading(false);
    }
  };

  if (loading) return <div>Cargando perfil...</div>;
  if (error) return <div>Error: {error}</div>;
  if (!perfil) return <div>Usuario no encontrado</div>;

  return (
    <div className="perfil-completo">
      {/* Secci√≥n de perfil */}
      <div className="perfil-header">
        <img src={perfil.foto_perfil} alt={perfil.nombre_usuario} />
        <div className="info-usuario">
          <h2>{perfil.nombre_usuario}</h2>
          <p>{perfil.nombre_completo}</p>
          <p>{perfil.bio}</p>
        </div>
        <div className="estadisticas">
          <span>{perfil.total_recetas} recetas</span>
          <span>{perfil.total_favoritos_recibidos} favoritos</span>
        </div>
      </div>

      {/* Secci√≥n de recetas */}
      <div className="recetas-usuario">
        <h3>Recetas de {perfil.nombre_usuario}</h3>
        <div className="recetas-grid">
          {recetas.map(receta => (
            <div key={receta.id} className="receta-card">
              <img src={receta.foto_principal} alt={receta.titulo} />
              <h4>{receta.titulo}</h4>
              <p>{receta.descripcion}</p>
              <div className="receta-meta">
                <span>{receta.dificultad}</span>
                <span>‚ù§Ô∏è {receta.total_favoritos}</span>
                <span>{receta.categoria_nombre}</span>
              </div>
              <div className="etiquetas">
                {receta.etiquetas.map(etiqueta => (
                  <span 
                    key={etiqueta.nombre}
                    style={{ backgroundColor: etiqueta.color }}
                  >
                    {etiqueta.nombre}
                  </span>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default PerfilUsuarioCompleto;
```

2. FUNCI√ìN UTILITARIA PARA OBTENER RECETAS

```javascript
// utils/recetasUsuario.js
export const obtenerRecetasUsuario = async (nombreUsuario, token) => {
  try {
    const response = await fetch(`/api/usuario/${nombreUsuario}/recetas`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data.data;
  } catch (error) {
    console.error('Error al obtener recetas de usuario:', error);
    throw error;
  }
};

// Uso en componentes
const mostrarRecetasUsuario = async (nombreUsuario) => {
  try {
    const recetas = await obtenerRecetasUsuario(nombreUsuario, token);
    console.log('Recetas obtenidas:', recetas);
    // Actualizar estado del componente
  } catch (error) {
    console.error('No se pudieron obtener las recetas:', error);
  }
};
```

3. COMPONENTE DE LISTA DE RECETAS (Vue.js)

```vue
<template>
  <div class="recetas-usuario">
    <h3>Recetas de {{ nombreUsuario }}</h3>
    
    <div v-if="loading" class="loading">
      Cargando recetas...
    </div>
    
    <div v-else-if="error" class="error">
      {{ error }}
    </div>
    
    <div v-else class="recetas-grid">
      <div 
        v-for="receta in recetas" 
        :key="receta.id" 
        class="receta-card"
        @click="verReceta(receta.id)"
      >
        <img :src="receta.foto_principal" :alt="receta.titulo" />
        <div class="receta-info">
          <h4>{{ receta.titulo }}</h4>
          <p>{{ receta.descripcion }}</p>
          <div class="receta-stats">
            <span>{{ receta.dificultad }}</span>
            <span>‚ù§Ô∏è {{ receta.total_favoritos }}</span>
            <span>{{ receta.categoria_nombre }}</span>
          </div>
          <div class="receta-ingredientes">
            <strong>Ingredientes:</strong>
            <ul>
              <li v-for="ingrediente in receta.ingredientes" :key="ingrediente.nombre">
                {{ ingrediente.cantidad }} {{ ingrediente.unidad_medida }} {{ ingrediente.nombre }}
                <span v-if="ingrediente.notas">({{ ingrediente.notas }})</span>
              </li>
            </ul>
          </div>
          <div class="etiquetas">
            <span 
              v-for="etiqueta in receta.etiquetas" 
              :key="etiqueta.nombre"
              class="etiqueta"
              :style="{ backgroundColor: etiqueta.color }"
            >
              {{ etiqueta.nombre }}
            </span>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  name: 'RecetasUsuario',
  props: {
    nombreUsuario: {
      type: String,
      required: true
    }
  },
  data() {
    return {
      recetas: [],
      loading: false,
      error: null
    };
  },
  async mounted() {
    await this.cargarRecetas();
  },
  methods: {
    async cargarRecetas() {
      this.loading = true;
      try {
        const response = await fetch(`/api/usuario/${this.nombreUsuario}/recetas`, {
          headers: {
            'Authorization': `Bearer ${this.$store.state.token}`
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          this.recetas = data.data;
        } else {
          this.error = 'Error al cargar las recetas';
        }
      } catch (error) {
        this.error = 'Error de conexi√≥n';
      } finally {
        this.loading = false;
      }
    },
    verReceta(recetaId) {
      this.$router.push(`/receta/${recetaId}`);
    }
  }
};
</script>
```

================================================================

üéØ CASOS DE USO COMUNES
=========================

1. **P√ÅGINA DE PERFIL COMPLETA**
   - Mostrar perfil b√°sico + todas las recetas del usuario
   - Grid de recetas con informaci√≥n completa
   - Filtros por categor√≠a, dificultad, etc.

2. **GALER√çA DE RECETAS**
   - Vista previa de recetas con im√°genes
   - Informaci√≥n b√°sica (t√≠tulo, descripci√≥n, favoritos)
   - Navegaci√≥n a receta completa

3. **COMPARACI√ìN DE USUARIOS**
   - Mostrar recetas de diferentes usuarios
   - Comparar estilos de cocina
   - Rankings de usuarios por recetas

4. **B√öSQUEDA Y FILTRADO**
   - Filtrar recetas por ingredientes
   - Buscar por etiquetas espec√≠ficas
   - Ordenar por popularidad o fecha

================================================================

üí° CARACTER√çSTICAS IMPORTANTES
================================

‚úÖ **INFORMACI√ìN COMPLETA DE RECETAS:**
- T√≠tulo, descripci√≥n, instrucciones
- Tiempos de preparaci√≥n y cocci√≥n
- Porciones y dificultad
- Categor√≠a y fecha de creaci√≥n

‚úÖ **INGREDIENTES DETALLADOS:**
- Nombre del ingrediente
- Unidad de medida
- Cantidad exacta
- Notas adicionales

‚úÖ **ETIQUETAS CON COLORES:**
- Nombre de la etiqueta
- Color hexadecimal para UI
- √ötil para filtros visuales

‚úÖ **ESTAD√çSTICAS:**
- Total de favoritos por receta
- Ordenadas por fecha (m√°s recientes primero)

‚úÖ **IM√ÅGENES PROCESADAS:**
- URLs completas autom√°ticamente
- No requiere procesamiento manual

================================================================

üîß INTEGRACI√ìN CON OTROS ENDPOINTS
===================================

Este endpoint se puede combinar con:

1. **GET /api/usuario/{nombre_usuario}** - Para perfil b√°sico
2. **GET /api/feed** - Para comparar con otras recetas
3. **GET /api/favoritos** - Para ver favoritos del usuario actual

Ejemplo de integraci√≥n completa:
```javascript
const cargarPerfilCompleto = async (nombreUsuario) => {
  const [perfil, recetas] = await Promise.all([
    obtenerPerfilUsuario(nombreUsuario, token),
    obtenerRecetasUsuario(nombreUsuario, token)
  ]);
  
  return { perfil, recetas };
};
```

================================================================

‚ö†Ô∏è CONSIDERACIONES DE PERFORMANCE
==================================

1. **CARGA PARALELA:** Usar Promise.all para cargar perfil y recetas simult√°neamente
2. **LAZY LOADING:** Cargar recetas solo cuando se necesiten
3. **PAGINACI√ìN:** Considerar paginaci√≥n para usuarios con muchas recetas
4. **CACH√â:** Guardar datos en estado local para evitar recargas

**EJEMPLO DE OPTIMIZACI√ìN:**
```javascript
// Cargar solo perfil inicialmente
const [perfil] = await Promise.all([
  obtenerPerfilUsuario(nombreUsuario, token)
]);

// Cargar recetas cuando el usuario haga scroll o clic
const cargarRecetas = async () => {
  if (recetas.length === 0) {
    const recetasData = await obtenerRecetasUsuario(nombreUsuario, token);
    setRecetas(recetasData);
  }
};
```

================================================================

üé® SUGERENCIAS DE DISE√ëO
==========================

1. **GRID RESPONSIVE:**
   - Adaptar n√∫mero de columnas seg√∫n pantalla
   - Im√°genes con aspect ratio consistente
   - Informaci√≥n organizada jer√°rquicamente

2. **CARDS DE RECETA:**
   - Imagen destacada
   - Informaci√≥n esencial visible
   - Hover effects para m√°s detalles
   - Botones de acci√≥n (favorito, compartir)

3. **FILTROS Y ORDENAMIENTO:**
   - Filtros por categor√≠a, dificultad, etiquetas
   - Ordenar por fecha, favoritos, alfab√©tico
   - B√∫squeda por t√≠tulo o ingredientes

4. **ESTADOS DE CARGA:**
   - Skeleton loaders para recetas
   - Loading states individuales
   - Error states con reintento

================================================================

üìù NOTAS FINALES
==================

- Este endpoint es perfecto para p√°ginas de perfil completo
- La informaci√≥n es completa y lista para mostrar
- Ideal para funcionalidades sociales y comparativas
- Se puede usar como base para recomendaciones
- Permite crear experiencias ricas de usuario

**RESUMEN DE URLs:**
- **API Endpoint:** `GET /api/usuario/{nombre_usuario}/recetas` (para obtener recetas)
- **Frontend Route:** `/perfil/{nombre_usuario}` (para mostrar p√°gina)

¬°Listo para implementar en tu frontend! üöÄ 