üì± ENDPOINT PERFIL DE USUARIO AJENO - GU√çA COMPLETA PARA FRONTEND
================================================================

üéØ ENDPOINT DISPONIBLE

GET /api/usuario/{nombre_usuario} - Obtener perfil p√∫blico de otro usuario por nombre de usuario

‚ö†Ô∏è NOTA: Los nombres de usuario son √∫nicos en la base de datos, por lo que este endpoint es m√°s pr√°ctico para el frontend

================================================================

üë§ OBTENER PERFIL P√öBLICO DE OTRO USUARIO
==========================================

ENDPOINT: GET /api/usuario/{nombre_usuario}

üîê AUTENTICACI√ìN
- Requerida: S√≠
- Tipo: Bearer Token
- Header: Authorization: Bearer {token}

üìã PAR√ÅMETROS DE URL (REQUERIDOS)
- nombre_usuario: string - Nombre de usuario cuyo perfil quieres ver

üì§ REQUEST EXAMPLE

const obtenerPerfilUsuario = async (nombreUsuario) => {
  try {
    const response = await fetch(`/api/usuario/${nombreUsuario}`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (response.ok) {
      const data = await response.json();
      console.log('Perfil del usuario:', data.data);
      return data.data;
    } else {
      const error = await response.json();
      console.error('Error:', error);
    }
  } catch (error) {
    console.error('Error:', error);
  }
};

‚úÖ RESPONSE SUCCESS (200)

{
  "data": {
    "id": 2,
    "nombre_usuario": "chef_maria",
    "nombre_completo": "Mar√≠a L√≥pez",
    "bio": "Chef especializada en pasteler√≠a francesa",
    "foto_perfil": "http://localhost/api/images/profiles/2.jpg",
    "fecha_registro": "2025-01-05 14:30:00",
    "total_recetas": 8,
    "total_favoritos_recibidos": 45
  }
}

‚ùå C√ìDIGOS DE ERROR

| C√≥digo | Descripci√≥n |
|--------|-------------|
| 401 | No autorizado (token inv√°lido) |
| 404 | Usuario no encontrado |

================================================================

üéØ VENTAJAS DE ESTE ENDPOINT
=============================

‚úÖ **VENTAJAS:**
- No necesitas conocer el ID del usuario
- Los nombres de usuario son √∫nicos en la base de datos
- M√°s intuitivo para URLs amigables del frontend (ej: `/perfil/chef_maria`)
- El frontend ya tiene acceso al nombre de usuario en el feed
- Mejor para SEO y compartir enlaces
- Estructura m√°s limpia y directa

**EJEMPLO DE USO PR√ÅCTICO:**
```javascript
// En el feed, cuando haces clic en un nombre de usuario
const handleClickUsuario = (nombreUsuario) => {
  // 1. Llamar a la API para obtener datos del perfil
  const perfil = await obtenerPerfilUsuario(nombreUsuario);
  
  // 2. Navegar a la p√°gina del perfil (URL del frontend)
  router.push(`/perfil/${nombreUsuario}`);
};
```

**DIFERENCIA ENTRE URLs:**
- **API:** `GET /api/usuario/chef_maria` (para obtener datos)
- **Frontend:** `/perfil/chef_maria` (para mostrar la p√°gina)

================================================================

üé® EJEMPLOS DE USO EN FRONTEND
================================

1. COMPONENTE DE PERFIL DE USUARIO AJENO (React)

```jsx
import React, { useState, useEffect } from 'react';

const PerfilUsuarioAjeno = ({ nombreUsuario, token }) => {
  const [perfil, setPerfil] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    cargarPerfil();
  }, [nombreUsuario]);

  const cargarPerfil = async () => {
    try {
      setLoading(true);
      const response = await fetch(`/api/usuario/${nombreUsuario}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const data = await response.json();
        setPerfil(data.data);
      } else {
        const errorData = await response.json();
        setError(errorData.message);
      }
    } catch (error) {
      setError('Error al cargar el perfil');
    } finally {
      setLoading(false);
    }
  };

  if (loading) return <div>Cargando perfil...</div>;
  if (error) return <div>Error: {error}</div>;
  if (!perfil) return <div>Usuario no encontrado</div>;

  return (
    <div className="perfil-usuario-ajeno">
      <div className="perfil-header">
        <img 
          src={perfil.foto_perfil || '/default-avatar.jpg'} 
          alt={perfil.nombre_usuario}
          className="foto-perfil"
        />
        <div className="info-usuario">
          <h2>{perfil.nombre_usuario}</h2>
          <p className="nombre-completo">{perfil.nombre_completo}</p>
          <p className="bio">{perfil.bio}</p>
        </div>
      </div>

      <div className="estadisticas">
        <div className="stat">
          <span className="numero">{perfil.total_recetas}</span>
          <span className="label">Recetas</span>
        </div>
        <div className="stat">
          <span className="numero">{perfil.total_favoritos_recibidos}</span>
          <span className="label">Favoritos</span>
        </div>
        <div className="stat">
          <span className="numero">
            {new Date(perfil.fecha_registro).toLocaleDateString()}
          </span>
          <span className="label">Miembro desde</span>
        </div>
      </div>

      {/* Aqu√≠ puedes agregar m√°s secciones como:
          - Lista de recetas del usuario
          - Bot√≥n de seguir (si implementas esa funcionalidad)
          - Comentarios sobre el usuario
      */}
    </div>
  );
};

export default PerfilUsuarioAjeno;
```

2. FUNCI√ìN UTILITARIA PARA OBTENER PERFIL

```javascript
// utils/perfilUsuario.js
export const obtenerPerfilUsuario = async (nombreUsuario, token) => {
  try {
    const response = await fetch(`/api/usuario/${nombreUsuario}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data.data;
  } catch (error) {
    console.error('Error al obtener perfil de usuario:', error);
    throw error;
  }
};

// Uso en componentes
const mostrarPerfilUsuario = async (nombreUsuario) => {
  try {
    const perfil = await obtenerPerfilUsuario(nombreUsuario, token);
    console.log('Perfil obtenido:', perfil);
    // Actualizar estado del componente
  } catch (error) {
    console.error('No se pudo obtener el perfil:', error);
  }
};
```

3. COMPONENTE DE TARJETA DE USUARIO (Vue.js)

```vue
<template>
  <div class="usuario-card" @click="verPerfil">
    <img :src="perfil.foto_perfil" :alt="perfil.nombre_usuario" />
    <div class="info">
      <h3>{{ perfil.nombre_usuario }}</h3>
      <p>{{ perfil.nombre_completo }}</p>
      <div class="stats">
        <span>{{ perfil.total_recetas }} recetas</span>
        <span>{{ perfil.total_favoritos_recibidos }} favoritos</span>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  name: 'UsuarioCard',
  props: {
    nombreUsuario: {
      type: String,
      required: true
    }
  },
  data() {
    return {
      perfil: null,
      loading: false
    };
  },
  async mounted() {
    await this.cargarPerfil();
  },
  methods: {
    async cargarPerfil() {
      this.loading = true;
      try {
        const response = await fetch(`/api/usuario/${this.nombreUsuario}`, {
          headers: {
            'Authorization': `Bearer ${this.$store.state.token}`
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          this.perfil = data.data;
        }
      } catch (error) {
        console.error('Error al cargar perfil:', error);
      } finally {
        this.loading = false;
      }
    },
    verPerfil() {
      // Navegar a la p√°gina del perfil (URL del frontend)
      this.$router.push(`/perfil/${this.nombreUsuario}`);
    }
  }
};
</script>
```

================================================================

üéØ CASOS DE USO COMUNES
=========================

1. **PERFIL P√öBLICO DE USUARIO**
   - Cuando un usuario hace clic en el nombre de otro usuario en el feed
   - En la p√°gina de detalles de una receta (ver perfil del autor)
   - En listas de usuarios populares
   - URLs amigables del frontend: `/perfil/chef_maria`

2. **COMPARACI√ìN DE ESTAD√çSTICAS**
   - Mostrar ranking de usuarios por recetas o favoritos
   - Comparar actividad entre usuarios
   - Gamificaci√≥n (badges, niveles)

3. **NAVEGACI√ìN ENTRE USUARIOS**
   - Desde comentarios (ver perfil del comentarista)
   - Desde valoraciones (ver perfil del valorador)
   - Desde b√∫squedas de usuarios

================================================================

üí° CARACTER√çSTICAS IMPORTANTES
================================

‚úÖ **INFORMACI√ìN P√öBLICA:**
- nombre_usuario
- nombre_completo
- bio
- foto_perfil
- fecha_registro

‚úÖ **ESTAD√çSTICAS:**
- total_recetas (solo recetas activas)
- total_favoritos_recibidos (en todas sus recetas)

‚ùå **INFORMACI√ìN PRIVADA (NO INCLUIDA):**
- email
- contrase√±a
- datos personales sensibles

‚úÖ **URLS PROCESADAS:**
- foto_perfil viene con URL completa
- No necesitas procesar URLs manualmente

‚úÖ **ESTAD√çSTICAS EN TIEMPO REAL:**
- Se calculan en cada consulta
- Reflejan el estado actual de la base de datos

================================================================

üîß INTEGRACI√ìN CON OTROS ENDPOINTS
===================================

Este endpoint se puede combinar con:

1. **GET /api/personal_posts_preview** - Para ver las recetas del usuario
2. **GET /api/feed** - Para excluir las recetas de este usuario del feed
3. **GET /api/favoritos** - Para ver qu√© recetas ha marcado como favoritas este usuario

Ejemplo de integraci√≥n:
```javascript
// Cargar perfil y recetas del usuario
const cargarPerfilCompleto = async (nombreUsuario) => {
  const [perfil, recetas] = await Promise.all([
    obtenerPerfilUsuario(nombreUsuario, token),
    obtenerRecetasUsuario(nombreUsuario, token)
  ]);
  
  return { perfil, recetas };
};
```

**FLUJO COMPLETO:**
1. **Frontend:** Usuario hace clic en `/perfil/chef_maria`
2. **API:** Se llama a `GET /api/usuario/chef_maria` para obtener datos
3. **Frontend:** Se muestran los datos en la p√°gina del perfil

================================================================

‚ö†Ô∏è CONSIDERACIONES DE SEGURIDAD
=================================

1. **AUTENTICACI√ìN REQUERIDA:** Aunque es informaci√≥n p√∫blica, requiere token v√°lido
2. **INFORMACI√ìN LIMITADA:** Solo muestra datos p√∫blicos, no informaci√≥n sensible
3. **VALIDACI√ìN DE ID:** El backend valida que el usuario existe
4. **RATE LIMITING:** Respeta los l√≠mites de peticiones por minuto

================================================================

üé® SUGERENCIAS DE DISE√ëO
==========================

1. **LAYOUT RESPONSIVE:**
   - Foto de perfil circular o cuadrada
   - Informaci√≥n organizada en secciones
   - Estad√≠sticas destacadas visualmente

2. **ESTADOS DE CARGA:**
   - Skeleton loader mientras carga
   - Mensaje de error si falla
   - Placeholder para foto de perfil

3. **INTERACCIONES:**
   - Hover effects en elementos clickeables
   - Transiciones suaves
   - Feedback visual en acciones

4. **ACCESIBILIDAD:**
   - Alt text en im√°genes
   - Contraste adecuado
   - Navegaci√≥n por teclado

================================================================

üìù NOTAS FINALES
==================

- Este endpoint es perfecto para crear perfiles p√∫blicos de usuarios
- Las estad√≠sticas se actualizan en tiempo real
- No requiere permisos especiales, solo autenticaci√≥n
- Ideal para funcionalidades sociales como seguir usuarios
- Se puede usar como base para implementar sistema de reputaci√≥n

**RESUMEN DE URLs:**
- **API Endpoint:** `GET /api/usuario/{nombre_usuario}` (para obtener datos)
- **Frontend Route:** `/perfil/{nombre_usuario}` (para mostrar p√°gina)

¬°Listo para implementar en tu frontend! üöÄ 